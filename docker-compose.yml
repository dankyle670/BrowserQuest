version: "3.8"

services:
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    depends_on:
      redis:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    environment:
      - REDIS_HOST=redis
      - NODE_ENV=production

  app2:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    depends_on:
      redis:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    environment:
      - REDIS_HOST=redis
      - NODE_ENV=production

  client:
    build:
      context: .
      dockerfile: Dockerfile.client
    ports:
      - "8080:8080"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"  #  Ã€ supprimer en production (Yvann)
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  redis_replica:
    image: redis:alpine
    depends_on:
      - redis
    command: redis-server --replicaof redis 6379 --appendonly yes
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  nginx:
    image: nginx:latest
    ports:
      - "81:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./health_check.conf:/etc/nginx/conf.d/health_check.conf
    depends_on:
      - app1
      - app2
      - client
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/healthz"]
      interval: 10s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: always

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: always
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    restart: unless-stopped
    volumes:
      - ./fail2ban/jail.local:/data/jail.local
      - ./fail2ban/filter.d:/data/filter.d
      - ./logs:/var/log/nodeapp:ro
  logtest:
    build:
      context: ./server
    ports:
      - "8005:8000"
    volumes:
      - ./logs:/app/logs
volumes:
  redis_data:
  grafana_data:
